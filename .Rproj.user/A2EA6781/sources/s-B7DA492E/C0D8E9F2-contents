---
title: "Wimtrap"
author:
- Rivi√®re Quentin <qri@hotmail.be>
- Matthieu Defrance <matthieu.dc.defrance@ulb.be>
- Massimiliano Corso, Madalina Ciortan, Nathalie Verbruggen
date: '`r format(Sys.Date(), "%B %d %Y")`'
output: 
  html_document:
    toc: true
    toc_depth: 2
vignette: >
  %\VignetteIndexEntry{Wimtrap}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---
```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
library(DiagrammeR)
```

# 1. Description of the package

Wimtrap is a R package that allows to predict the location of transcription factor binding sites (TFBS) in a 'condition' -specific' manner. It aims at addressing a problematic of major importance in biology: the identification of genes that are regulated by a given transcription factor (TF). A popular approach consists of performing 'pattern-matching' analyses, which make use of the the sequence-specific affinities (motifs) of the transcription factors. However, relying solely on the detection of motif occurrences to predict binding sites lead to high false discovery rates in organisms such as plants and metazoans. Wimtrap implements a methodological workflow that exploits ChIP-chip/seq data in order to train models to predict the binding sites among motif occurrences detected by pattern-matching, in the studied condition (growth stage, tissue, cell type, treatment). These models integrate various genomic features at location of potential binding sites, such as the location on genes, the phylogenetic conservation of DNA sequence, the results of digital genomic footprinting or chromatin state features.

# 2. Installation of Wimtrap

```{r, eval=FALSE}
#Pre-requisite: devtools
if(!require("devtools")){
  install.packages("devtools")
}
#Wimtrap
devtools::install_github("RiviereQuentin/Wimtrap")
```

# 3. Presentation of the package

## 3.1 Functions
Wimtrap makes available **4 functions** in order to **build** a **predictive model** of transcription factor binding sites (**TFBS**) from data obtained in the training organism-condition and to **obtain predictions** of the **location** of binding sites of the studied transcription factors  in the studied organism-condition. These functions allow to perform the following steps in the workflow of the method:

| Steps | Function |
|:-----|:---------:|
| - **Import** into the R session of the **predictive genomic data** specific to the training and studied organism(s)-condition(s) <br /> - **Gathering** of the **transcript models** | `importGenomicData()` |
| - **Location** of the **potential binding sites** of the training and studied transcription factor(s) along the genome <br /> - **Genomic feature extraction** at the location of the potential binding sites, performed specifically to the training (studied) organism-condition for the training (studied) transcription factor(s) <br /> - **Feature scaling** and **categorical** variables **encoding** | `getTFBSdata()` |
| From the dataset related to the training transcription factor(s): <br /> - **Labeling** of the potential binding sites based on ChIP-seq/chip data obtained in the training organism-condition <br /> - **Dataset balancing** <br /> - **Machine learning** (XG Boosting) <br /> - **Model evaluation** | `buildTFBSmodel()` |
| From the dataset related to the studied transcription factor(s): <br /> - **Prediction** of the **location** of the **binding sites** and gene targets of the studied transcription factor(s) in the studied organism-condition | `predictTFBS()` |

## 3.2 Inputs and outputs

The use of Wimtrap can be further explained through the following diagram, which presents the main inputs to the method (in coral color) and the outputs of the `getTFBSdata()`, `buildTFBSmodel()` and `predictTFBS()` functions. Each input/output is presented with conceptual attributes and how they can be used by functions implemented by the package. The arrows express relationships of dependence.

```{r diagram, echo=FALSE, out.width="100%", fig.dim=c(10,10)}
DiagrammeR::grViz("
digraph hierarchy {
# Graph statement
graph [overlap = true, fontsize = 20]

# Nodes
node[shape=record,style=filled,fillcolor=gray95]
1[label = '{Organism-condition | 
            + purpose (training or study) | 
            importGenomicData(): download of\\n
            transcript models\\n
            getTFBSdata(): download of genome\\n
            sequence}', fillcolor=coral1];
2[label = '{Genome sequence | 
            + purpose (training or study)\\n
            + format (FASTA) | 
            getTFBSdata(): location of the\\n
            motif matches}', fillcolor=coral1];
3[label = '{Predictive genomic data | 
            + purpose (training or study)\\n 
            + format (BED or GFF/GTF) |
            importGenomicData(): import of the\\n
            data into the R session\\n
            getTFBSdata(): feature extraction at\\n
            motif matches}', fillcolor=coral1];
4[label = '{Position Weight or Frequency Matrices |
            + purpose (training or study)\\n
            + format (raw pfm, jaspar, meme,\\n
            homer, cis-bp or transfac) |
            getTFBSdata(): location of the\\n
            motif matches}', fillcolor=coral1];
5[label = '{Dataset of potential binding sites |
            + purpose (training or study)\\n
            + parameters of pattern-matching\\n
            (algorithm, score threshold)\\n
            + parameters of genomic feature\\n
            extraction (windows length) | 
            buildTFBSmodel(): building of \\n
            a model by XGBoost (purpose = training)
            predictTFBS(): predict the location of\\n
            transcription factor binding\\n
            sites (purpose = study)}'];
6[label = '{Location of ChIP-peaks |
            + related transcription factor(s)\\n
            and organism-condition (i.e. of training)\\n
            + length of the ChIP-peaks \\n
            + format (BED or NARROWPEAK) | 
            buildTFBSmodel(): labeling of\\n
            the potential binding sites of\\n
            the training TFs
            binding sites or not}', fillcolor=coral1];
7[label = '{TFBS predictive model |
            + model class (xgb.Booster,...)\\n
            + Predictive features\\n
            + organism-condition of the training\\n
            + Specificity (general or TF-specific) | 
            predictTFBS(): predict the location\\n
            of binding sites of the studied\\n
            transcription factors}'];
8[label = '{Predicted binding sites and gene targets | 
            + organism-condition specificity (i.e. of study) |
            Functions of filtering, visualization, \\n
            GO enrichment analysis, analysis of co-expressed\\n
            or co-regulated genes}']

#Edges
 edge[dir=back, arrowtail=open, style=dashed]
 1 -> {2,3,4}
 2 -> 5
 3 -> 5
 4 -> 5
 1 -> 6
 5 -> 7
 6 -> 7
 7 -> 8
 5 -> 8
}")
```

This diagram illustrates how to practically address a problematic using Wimtrap:

1. Define the transcription factor(s) to study in a given organism and condition ('Condition' can be defined here by a growth stage, an organ, a treatment or any other criterion that allows to designate biological materials with comparable state of the chromatin).
2. Search for predictive genomic data specific to the organism and condition of study in the literature or on dedicated databases such as [ArrayExpress](https://www.ebi.ac.uk/arrayexpress) or [GEO](https://www.ncbi.nlm.nih.gov/gds). These genome-wide data can be related to results of phylogenetic footprinting (identification of conserved elements), digital genomic footrprinting and the chromatin state (degree of opening, histone modifications and variants, methylation of the cytosine).

   + *These data have to be downloaded in the [BED](https://www.ensembl.org/info/website/upload/bed.html) or [GTF/GFF](https://www.ensembl.org/info/website/upload/gff.html) format. The score field might be empty. The name field can be used to assign a category to the genomic intervals*.
   + *Transcript models can be automatically downloaded using the* `importGenomicData()` *function from the [biomart](https://m.ensembl.org/info/data/biomart/index.html) database*.
   
3. Search for ChIP-chip/seq data related to transcription factor(s) and obtained in the studied organism-condition.

    + *The ChIP-chip/seq data have to be downloaded in the [BED](https://www.ensembl.org/info/website/upload/bed.html) or [NARROWPEAK](http://genome.ucsc.edu/FAQ/FAQformat.html#format12) format. N.B.: the score field might be empty as the score of the ChIP-peaks will not be considered*.
    
4. Are ChIP-chip/seq data available in the studied organism-condition?

  * **YES**: the training organism-condition corresponds to the training organism-condition (optimal use case). Select all the available ChIP-chip/seq data for this organism-condition and go to the point 5.
  * **NO**: define a training condition-organism different but close from the studied organism-condition. For the training condition-organism, gather predictive genomic data (a part or all of the genomic data gathered for the studided condition in point 2) and ChIP-seq/chip data related to the transcription factor(s) (if possible, select only thise related to the studied transcription factors so that TF-specific models can be built). Go to point the 5.
  
    + *The 'granularity' of the predictive genomic data has to be the same in the training and studied organism-condition. Scores have to be provided in both organisms-conditions or none. For categorical data, the category of genomic intervals have to be defined similarly in both organisms-conditions*.
    
5. Obtain the position frequency or weigth matrices (PFMs or PWMs) representing the motifs of the studied transcription factors and the studied ones (= those for which ChIP-chip/seq data will be considered to train the model), from literature search or dedicated databases such as [Homer](http://homer.ucsd.edu/homer/index.htmljas), [Jaspar](http://jaspar.genereg.net/), [Cis-BP](http://cisbp.ccbr.utoronto.ca/), [Transfac](http://gene-regulation.com/pub/databases.html) or [PlantTFDB](http://planttfdb.gao-lab.org/).

    + *The PWMs/PFMs can be downloaded in the [homer](http://homer.ucsd.edu/homer/motif/creatingCustomMotifs.html), [cis-bp](http://embnet.ccg.unam.mx/rsat/help.convert-matrix.html), [jaspar](http://embnet.ccg.unam.mx/rsat/help.convert-matrix.html), [transfac](http://embnet.ccg.unam.mx/rsat/help.convert-matrix.html), [meme](http://embnet.ccg.unam.mx/rsat/help.convert-matrix.html) or [raw PFM](http://jaspar.genereg.net/faq/) format.*
    + *This step is not necessary if you want to locate transcription factor potential binding sites using other approaches (c.f * `matches`* argument of the* `getTFBSdata()` *function)*.
    
7. Obtain the genome sequence of the studied and training organisms.

    + *The genome sequence(s) have to be downloaded in the [FASTA](https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=BlastHelp) format*.
    + *The genome sequences can be automatically downloaded using the* `getTFBSdata()` *function from the [Ensembl](https://www.ensembl.org/index.htmll) or [EnsemblGenomes](https://ensemblgenomes.org/) database*.

8. Get the dataset of potential binding sites of the **studied** transcription factors: use the `importGenomicData()` to import into the session the predictive genomic data specific to the **studied** organism-condition and `getTFBSdata()` to locate the potential binding sites of the **studied** transcription factor(s) and annotate them with features extracted from the imported genomic data.

9. Get the dataset of potential binding sites of the **studied** transcription factors: use the `importGenomicData()` to import into the session the predictive genomic data specific to the **training** organism-condition and `getTFBSdata()` to locate the potential binding sites of the **training** transcription factor(s) and annotate them with features extracted from the imported genomic data.

    + *The pattern-matching can be performed using an external tool (c.f * `matches` *argument of the* `getTFBSdata()` *function) or can be achieved with Wimtrap using different p-value thresholds (c.f * `matches` *argument of the* `getTFBSdata()` *function)*.
    + *The genomic features are extracted on windows, centered on the potential binding sites, of three different lenghts that might be set. Default: 20, 400 and 1000bp. (c.f * `small_window, medium_window, long_window` *arguments of the* `getTFBSdata()` *function)*

10. Train by extreme gradient boosting a predictive model based on the ChIP-chip/seq data and the dataset of the potential binding sites of the training transcription factors using the `buildTFBSmodel()` function.

    + *If ChIP-chip/seq data are available in the training organism-condition for the studied transcription factor(s), build a TF-specific model for each studied transcription factor. A TF-specific model can be obtained when the `buildTFBSmodel()` is fed with data related to only on transcription factor.*
    + *For advanced users, other machine learning methods can be implemented based on the ChIP-chip/seq data and the dataset of the potential binding sites of the training transcription factors using a custom code. The resulting object needs to be of a class that can be used by the function `stats::predict()`.*
    + *The length of the ChIP-peaks might be adjusted. Default = 400 bp (c.f * `lengthChIPpeaks` *argument of the* `buildTFBSmodel()` *function)*.
    
11. Apply the (general or TF-specific) predictive model on the dataset of the potential binding of the studied transcription factor(s) to get the predictions specific to the organism-condition of interest.

    + *Each potential binding site is associated to a score (from 0 to 1) which can be seen as its likelihood to be a transcription factor binding site. By default, we recommand to predict as binding sites all the potential binding sites that get a score higher to 0.5.*

12. Use the predictions (1) to infer the potential gene targets of the studied transcription factor, (2) to assess the over-representation of potential binding sites among the promoters of co-regulated genes, (3) to compare the regulatory regions of different genes

# 4. Example: prediction of the gene targets of CCA1 in the roots of *Arabidopsis thaliana*

* For 7-days old roots of *Arabidopsis thaliana*, we could find the results of [DNAseI-seq](http://plantregmap.gao-lab.org/download_ftp.php?filepath=08-download/Arabidopsis_thaliana/DHS/DHS_Ath_root_7_days.bed) and [digital genomic footrprinting](http://plantregmap.gao-lab.org/download_ftp.php?filepath=08-download/Arabidopsis_thaliana/DGF/DGF_Ath_root_7_days.bed) on the [PlantTFDB](http://plantregmap.gao-lab.org/) database. These data will allow to extract genomic features of high predictivity of transcription factor binding sites. The results of DNAseI-seq consist of the location of regions of open chromatin, which are scored according to their degree of opening. Digital genomic footprinting is a method that is used to predict binding events on the DNA based on the protective effect for DNA of bound proteins against DNAseI cleavage on regions of open chromatin.
* We 



```{r}
library(Wimtrap)

```

# 2. Models and data available on github

On the github repository [RiviereQuentin/Wimtrap](https://github.com/RiviereQuentin/Wimtrap), we make available models specific to *Arabidopsis thaliana* and *Solanum lycopersicum* and underlying data.

These resources might be used for the following applications:

1. Use the general models obtained from data specific to *Arabidopsis thaliana* seedlings / *Solanum lycopersicum* ripening fruits to quickly get prediction of transcription factor binding sites (TFBS) and infer the cognate potential gene targets:
    a. in *Arabidopsis thaliana* seedlings / *Solanum lycopersicum* ripening fruits (optimal use case).
    b. in the same organisms but in one of the other conditions that are described on the github repository, in *Arabidopsis thaliana* (flowers, roots, root hairs and seed coat) and *Solanum lycopersicum* (immature fruits). This use case is sub-optimal but is justified by the absence of ChIP-chip/seq data obtained in these conditions that would allow to build specific models.
    c. by transferring the models to other organisms/conditions. This use case is also sub-optimal and is deprecated when ChIP-seq data are available for the organism and condition that you study.
2. Build new models from data related to *Arabidopsis thaliana* seedlings / *Solanum lycopersicum* ripening fruits by adding and/or selecting transcription factor ChIP-seq/chip data and genome-wide predictive data. This might be useful to obtain (1) TF-specific models, (2) models that will be applied to an organism-condition for which there are no available ChIP-chip/seq data ant that integrate only the features that are available in this organism-condition, (3) models that are more accurate models for *Arabidopsis thaliana* seedlings / *Solanum lycopersicum* ripening fruits.

*If you build models that incorporate extended data for* Arabidopsis thaliana *seedlings / *Solanum lycopersicum *ripening fruits or that are specific to new organisms/conditions, you are encouraged to upload them together with their underlying data on the RiviereQuentin/Wimtrap github repository.*





