---
title: 'wimtrap: Quick Start Guide'
date: "18 juillet 2018"
output:
  html_document:
    fig_height: 3.5
    fig_width: 5
    toc: yes
---
\VignetteEngine{knitr::knitr}
\newpage
\tableofcontent
\newpage

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Introduction

*wimtrap* aims at offering flexible and fast tools that allow to build and evaluate predictive models of the attractiveness of motifs (=patterns) occurrences, in order to reduce the false discovery rate of potential binding sites of transcription factors when the genome is scanned with the motifs they recognize. The training process will learn how to predict the motifs occurrences attractiveness from the location of the associated ChIP-peaks (peak signal in data after Chromatin Immunoprecipitation followed by hybridzation to amicro-array or by sequencing): how are characterized the motifs occurrences that are attractive (=bound by the transcription factor according to the ChIP-data) in contrast with the ones that are not attractive? Predictive features considered are not only the common ones, such as the p-value of the pattern-matching score, the kind of DNA structure(s) the motifs occurrences overlap (promoters, coding sequences, ...) and the distance to the closest Transcription Start Site (TSS), but also additional user-input features, that typically describe the state of the chromatin or the location of conserved non-coding sequences.

The interest of the suggested approach comes from different points. We can say at first that the learning machine process will allow us to not specify parameters that are sometimes difficult to choose with the patter-matching tools commonly available, as the threshold of the p-value score or of the distance to the closest TSS. Secundly, the user-input features can significantly improve the quality of the prediction.

Once the machine learning process is achieved, you will be able to evaluate it throught visualization tools. In that way, the model with the most relevant sensitivity level can be chosen from the ROC curve, for example. You can also evaluate the importance of the different features or plot the decision trees of the built models.

If the performances of the predictive method are satisfying, you can then easily apply it and share it.

*wimtrap* is conceived to reach at least two different kinds of goals. The first one aims at building a general predictive model for a given species by considering a set of different transcription factors. The second one will consist of learning how to predict attractiveness of motifs occurrences for one partiuliar transciption factor in order typically to predict new potential targets in different organs or conditions than the ones considered to train the predictive models. Therefore, it is possible to modify the values of a user-input feature before making predictions, according to the condition or the organ you are interested in.  



## Building predictive models of the attractiveness of motifs occurrences

As an example, let's build together a predictive method for the plant model species *Arabidopsis thaliana*. We will consider the ChIP-Peaks locations of 8 different transcription factors [1]: FLM, SVP, FLC, PIF4, PIF5, PRR5, PRR7 and TOC1.  Their motifs can be found in the original papers that presented the ChIP-chip/seq data [2-9].

To predict the attractiveness of motifs occurrences we will use as features the p-value of the pattern-matching score, the distance to the closest Transcription Start Site as well as the location on DNA structures (promoters, downstream regions, 5' and 3' untranslated regions, coding sequences, introns). The DNA structures locations will be automatically downloaded from Ensembl (or Ensembl sisters) databases and the pattern-matching step can be performed by the function below. 

The motifs have to be described in a jaspar source file and the features as well the ChIP-peaks locations as BED or GFF source files. Please ensure that the motifs names in the jaspar source file correspond to the transcription factors that bind them.

In addition, we will input locations of DNASeI-hypersensitive (DHS) and opening scores of Transposase5-hypersensitive sites (TnHS) (N.B. DHS and CNS are open chromatine regions, that have been respectively identified by DNAseI- and ATAC-seq) [10, 11], locations of consereved non-coding sequences (CNS) [12-14] and of the ones 9 different chromatin states [15].

These data are input as BED or GFF files. If you just want to input a set of locations of regions satisfying a given condition (cf. CNS and DHS locations). If you want to associate the motifs occurrences to a numeric value (cf. TnHS sensitivity score) or a category (cf. chromatin states), the sources files have to describe the distribution of the features along the genome in the *score* field. To use categorical feature, the *score* field must contain letters. As an example, we had to convert the names of the 9 different chromatin states (that are originally labeled from 1 to 9) into letters (1 becomes "A", etc).

You can refer at the following links to the [jaspar](http://affinitydatabank.com/jaspar-pwm-formats/), [BED](https://www.ensembl.org/info/website/upload/bed.html ) and [GFF](https://www.ensembl.org/info/website/upload/gff3.html) formats.


All data are relative to plantlets.

```{r eval=FALSE, fig.width=8}
  wimtrapModel_athal <- wimtrapModeling(pfm_path = "Source_wimtrap/pfm_athal.jaspar",
                                        ChIP_paths = c("Source_wimtrap/FLM.bed",
                                                       "Source_wimtrap/SVP.bed",
                                                       "Source_wimtrap/FLC.bed",
                                                       "Source_wimtrap/PIF4.bed",
                                                       "Source_wimtrap/PIF5.bed",
                                                       "Source_wimtrap/PRR5.bed",
                                                       "Source_wimtrap/PRR7.bed",
                                                       "Source_wimtrap/TOC1.bed"),
                                        TFnameFromFileName =  TRUE,
                                        feature_paths = c("Source_wimtrap/DHS.bed",
                                                          "Source_wimtrap/TnHS.bed",
                                                          "Source_wimtrap/CNS.bed",
                                                          "Source_wimtrap/ChromatinStates.bed"),
                                        organism = "Arabidopsis thaliana")
```

The ChIP-peaks locations can be also provided in a single BED file with the name field giving the name of the related transcription factors.

The function offers alternatively some additional features that allow you to fully control the predictive features that you consider. The structures location, the Transcription Start Sites locations associated to the name of their transcripts and the genome sequence can be input as BED or GFF source files (or as objects loaded in the environment).

You can also provide the location of motifs occurrences that you might have obtained from external tools. Please refer to the manual for more informations.

## Checking and visualizing the training 
```{r echo=FALSE, message=FALSE, warning=FALSE}
library(wimtrap)
load("wimtrap_example.rda")
class(wimtrap_example) <- "wimtrapModel"
```


Have a first look about the predictive models that have just been built.

```{r eval=FALSE, fig.width=8}
wimtrapModel_athal
```

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(wimtrap)
load("wimtrap_example.rda")
class(wimtrap_example) <- "wimtrapModel"
wimtrap:::print.wimtrapModel(wimtrap_example)
```

You can know in that way which features have been considered to train the models and how they are important for making the predictions across the different models. You can also get the number of models that have been built and their main properties: their sensitivity and specificity, the total number of occurrences that has been considered in the training dataset to build them, their type (decision tree or rules) and the tree size (in the case where they are decision tree).

Next, use the visualization function to plot the ROC curve associated to the predictive method that we just built, as well as the distribution of the predictive features among the attractive and non-attractive motifs occurrences and the decision tree model at a specified level of sensitivity. Base yourself on the ROC curve to pick the model with the most relevant level of sensitivity. You want a model with both high sensitivity and specificity. The optimum is located at the himp of the ROC curve.

All the following plots are ouput by this single call to the plot function.
```{r eval = FALSE}
plot(wimtrapModel_athal, type = c("ROC", "Features"))
```

```{r echo=FALSE, warning=FALSE, paged.print=TRUE}
knitr::include_graphics("ROC.png")
knitr::include_graphics("MotifsScores.png")
knitr::include_graphics("DNAstructures.png")
knitr::include_graphics("DistancetoclosestTSS.png")
knitr::include_graphics("DNAfeatures.png")
knitr::include_graphics("ChromatinStates.png")
knitr::include_graphics("TnHS.png")
```

The appearance of a class "0" as chromatin state means that some regions of the genome are not described in the source file.

The optimum is achieved with a model with a sensitivity of around 0.862.

However for the example, we will rather plot a smallet tree decision for clarity. As you can see above, the model with a sensitivity of 0.2 has a tree size of .

The squares below show the proportion of attractive (in grey, "1") and non attractive occurrences (in black, "NO") among the individual that satisfy each set of conditions defined by the tree model. It allows to evaluate the accuracy of the predictions. The decision tree is also output, which states at each end of branch whether the occurrences are predicted as attractive or not.

```{r eval = FALSE}
plot(wimtrapModel_athal, type = "Model", sensitivity = 0.2)
```

```{r echo= FALSE, message=FALSE, warning=FALSE}
knitr::include_graphics("Model.png")
```

We might also be willing to extract the C5.0 predictive model of 0.862 sensitivity level to get complementary informations.


```{r eval= FALSE}
optimalModel <- extractC50(wimtrapModel_athal, sensitivity = 0.862)
cat(optimalModel$output)
```


```{r echo=FALSE, message=FALSE, warning=FALSE}
library(wimtrap)
load("wimtrap_example.rda")
class(wimtrap_example) <- "wimtrapModel"
optimalModel <- extractC50(wimtrap_example, sensitivity = 0.862)
cat(optimalModel$output)
```

## Predicting transcriptional targets

Using the model whose sensitivity level seems associated to the optimal predictions performances, we can now predict transcription targets of transcription factors based on the motifs they bind. Let's consider for example the motifs of ABI3 and GBF3, that can be downloaded from the jaspar database.

```{r eval = FALSE}
predictedTargets <- wimtrapPredicting(wimtrapModel_athal, 
                                      sensitivity = 0.867, 
                                      pfm_path = "Source_wimtrap/abi3_gbf3.jaspar")
str(predictedTargets$PredictedTargets)
```

```{r echo= FALSE, message=FALSE, warning=FALSE}
load("predictedTargets2.rda")
str(predictedTargets2$PredictedTargets)
```

These predictions are especially relevant for plantlets because the data about the opening of the chromatin that were used to train the models have been obtained in plantlets. Let's suppose that we are interested in the targets of ABI3 and GBF3 in flowers and let's modify accordingly the opening scores of DNAseI-hypersensitive sites.

```{r eval=FALSE}
getFeaturesNames(wimtrapModel_athal)
wimtrapModel_flowers <- modifyFeature(wimtrapModel_athal, 
                              featureName = "DHS", 
                              feature_path = "Source_wimtrap/DHS_flowers.bed")
predictedTargets <- wimtrapPredicting(wimtrapModel_flowers, 
                                      sensitivity = 0.867, 
                                      pfm_path = "Source_wimtrap/abi3_gbf3.jaspar")
names(predictedTargets)
```

The returned object contains 3 lists: "PredictedTargets", "AnnotatedPredictions" and "Model". 

"PredictedTargets" is the one that will probably interest you the most. It lists for each transcription factor the potential targets genes, i.e the genes whose the Transcription Start Site are the closest to the motifs occurrences predicted as attractive.

```{r eval=FALSE}
str(predictedTargets$PredictedTargets)
targets_GBF3 <- predictedTargets$PredictedTargets$GBF3
```

```{r echo= FALSE, message=FALSE, warning=FALSE}
load("predictedTargets.rda")
str(predictedTargets$PredictedTargets)
```

The second list, "AnnotatedPredictions", can be useful as well. It reports for each transcription factor all the motifs occurrences along the genome, their characterization according to the considered predictive features and at last the prediction about their attractiveness (in the last column). "NO" means that the motif is predicted as non-attractive and "1" as attractive.

```{r eval=FALSE}
head(predictedTargets$AnnotatedPredictions$GBF3)
```

```{r echo= FALSE, message=FALSE, warning=FALSE}
load("predictedTargets.rda")
head(predictedTargets$AnnotatedPredictions$GBF3)
```

This annotations can be interesting for example to filter the list of predicted targets according to additional criterions that you could find relevant. As you can see, the number of predicted is high despite the good performances of the predictive model (about 10000 genes, on a total of about 23000 genes in **Arabidopsis thaliana**). Because the binding of a transcription factor doesn't systematically trigger the control of the expression of a gene, you can suppose that only the motifs occurrences located in the promoter regions are functional.

Let's select for GBF3 the motifs occurrences predicted as attractive that are located in a region from -1000bp to 0bp upstream to a Trancription Start Site.

```{r eval=FALSE}
GBF3_AnnotatedPredictions <- predictedTargets$AnnotatedPredictions$GBF3
#convert GRanges into data.frame
GBF3_AnnotatedPredictions <- as.data.frame(GBF3_AnnotatedPredictions)
#select the motifs located upstream to a TSS, in region from -1500 bp to 0 bp from TSS
SelectedOccurrences <- GBF3_AnnotatedPredictions[GBF3_AnnotatedPredictions$DistToClosestTSS >= -1000 & 
                                                  GBF3_AnnotatedPredictions$DistToClosestTSS <= 0,]
#among these motifs occurrences, select the ones predicted as attractive
SelectedOccurrences <- SelectedOccurrences[SelectedOccurrences$Prediction == 1,]
#retrieve the names of the genes whose TSS is the closest to these selected motifs occurrences
Targets_GBF3 <- SelectedOccurrences$ClosestTSS
#consider genes names and not transcripts names
Targets_GBF3 <- as.character(Targets_GBF3)
Targets_GBF3 <- unlist(strsplit(Targets_GBF3, "[.]"))
Targets_GBF3 <- Targets_GBF3[seq(1, length(Targets_GBF3), 2)]
#eliminate doublons and order the targets
Targets_GBF3 <- Targets_GBF3[!(duplicated(Targets_GBF3))]
Targets_GBF3 <- Targets_GBF3[order(Targets_GBF3)]
str(Targets_GBF3) #You have now about 3600 targets
```

```{r echo= FALSE, message=FALSE, warning=FALSE}
load("Targets_GBF3.rda")
str(Targets_GBF3) #You have now about 3600 targets
```

You can then easily export the predictions, as csv file for example.

```{r eval=FALSE}
write.csv(Targets_GBF3, file = "path/to/your/output/directory/Targets_GBF3.csv", 
          row.names = FALSE, quote = FALSE)
```


## References
1. Heyndrickx KS, Van de Velde J, Wang C, Weigel D, Vandepoele K. A Functional and
Evolutionary Perspective on Transcription Factor Binding in Arabidopsis thaliana. Plant Cell
[Internet]. 2014;26:3894–910. Available from:
http://www.plantcell.org/cgi/doi/10.1105/tpc.114.130591
2. Posé D, Verhage L, Ott F, Yant L, Mathieu J, Angenent GC, et al. Temperature-dependent
regulation of flowering by antagonistic FLM variants. Nature [Internet]. 2013;503:414–7. Available
from: http://www.nature.com/doifinder/10.1038/nature12633
3. Tao Z, Shen L, Liu C, Liu L, Yan Y, Yu H. Genome-wide identification of SOC1 and SVP targets
during the floral transition in Arabidopsis. Plant J. 2012;70:549–61.
4. Oh E, Zhu J-Y, Wang Z-Y. Interaction between BZR1 and PIF4 integrates brassinosteroid and
environmental responses. Nat. Cell Biol. [Internet]. Nature Publishing Group; 2012;14:802–9.
Available from: http://www.nature.com/doifinder/10.1038/ncb2545
5. Hornitschek P, Kohnen M V., Lorrain S, Rougemont J, Ljung K, López-Vidriero I, et al.
Phytochrome interacting factors 4 and 5 control seedling growth in changing light conditions by
directly controlling auxin signaling. Plant J. 2012;71:699–711.
6. Liu T, Carlsson J, Takeuchi T, Newton L, Farré EM. Direct regulation of abiotic responses by the
Arabidopsis circadian clock component PRR7. Plant J. 2013;76:101–14.
7. Deng W, Ying H, Helliwell CA, Taylor JM, Peacock WJ, Dennis ES. FLOWERING LOCUS C
(FLC) regulates development pathways throughout the life cycle of Arabidopsis. Proc. Natl. Acad.
Sci. [Internet]. 2011;108:6680–5. Available from:
http://www.pnas.org/cgi/doi/10.1073/pnas.1103175108
8. Nakamichi N, Kiba T, Kamioka M, Suzuki T, Yamashino T, Higashiyama T, et al. Transcriptional
repressor PRR5 directly regulates clock-output pathways. Proc. Natl. Acad. Sci. [Internet].
2012;109:17123–8. Available from: http://www.pnas.org/cgi/doi/10.1073/pnas.1205156109
9. Huang W, Perez-Garcia P, Pokhilko A, Millar AJ, Antoshechkin I, Riechmann JL, et al. Mapping
the Core of the Arabidopsis Circadian Clock Defines the Network Structure of the Oscillator.
Science (80-. ). [Internet]. 2012;336:75–9. Available from:
http://www.sciencemag.org/cgi/doi/10.1126/science.1219075
10. Zhang W, Zhang T, Wu Y, Jiang J. Genome-Wide Identification of Regulatory DNA Elements
and Protein-Binding Footprints Using Signatures of Open Chromatin in Arabidopsis. Plant Cell
[Internet]. 2012;24:2719–31. Available from:
http://www.plantcell.org/cgi/doi/10.1105/tpc.112.098061
11. Lu Z, Hofmeister BT, Vollmers C, DuBois RM, Schmitz RJ. Combining ATAC-seq with nuclei
sorting for discovery of cis-regulatory regions in plant genomes. Nucleic Acids Res. 2016;45:1–13
12. Thomas BC, Rapaka L, Lyons E, Pedersen B, Freeling M. Arabidopsis intragenomic conserved
noncoding sequence. Proc. Natl. Acad. Sci. U. S. A. [Internet]. 2007;104:3348–53. Available from:
http://www.pnas.org/content/104/9/3348.abstract?
ijkey=017436f510cf49c2a265c3d1fbe2cf736b090e70&keytype2=tf_ipsecsha
13. Haudry A, Platts AE, Vello E, Hoen DR, Leclercq M, Williamson RJ, et al. An atlas of over
90,000 conserved noncoding sequences provides insight into crucifer regulatory regions. Nat.
Genet. [Internet]. Nature Publishing Group; 2013;45:891–8. Available from:
http://www.nature.com/doifinder/10.1038/ng.2684
14. Baxter L, Jironkin A, Hickman R, Moore J, Barrington C, Krusche P, et al. Conserved
Noncoding Sequences Highlight Shared Components of Regulatory Networks in Dicotyledonous
Plants. Plant Cell [Internet]. 2012;24:3949–65. Available from:
http://www.plantcell.org/lookup/doi/10.1105/tpc.112.103010
15. Sequeira-Mendes J, Araguez I, Peiro R, Mendez-Giraldez R, Zhang X, Jacobsen SE, et al. The
Functional Topography of the Arabidopsis Genome Is Organized in a Reduced Number of Linear
Motifs of Chromatin States. Plant Cell [Internet]. 2014;26:2351–66. Available from:
http://www.plantcell.org/cgi/doi/10.1105/tpc.114.124578
