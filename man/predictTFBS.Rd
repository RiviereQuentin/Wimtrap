% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Wimtrap.R
\name{predictTFBS}
\alias{predictTFBS}
\title{Predicts transcription factor binding sites}
\usage{
predictTFBS(
  TFBSmodel,
  pfm = NULL,
  targetTF = NULL,
  organism = NULL,
  genome_sequence = "getGenome",
  imported_genomic_data,
  matches = NULL,
  strandAsFeature = FALSE,
  pvalThreshold = 0.001,
  short_window = 20,
  medium_window = 400,
  long_window = 1000,
  show_annotations = FALSE
)
}
\arguments{
\item{TFBSmodel}{A xgb.Booster object as output by the function \code{\link[=buildTFBSmodel]{buildTFBSmodel()}} or any predictive model
that can be used by the function \code{\link[stats:predict]{stats::predict()}}.}

\item{pfm}{Path to a file in the raw Jaspar format. This file describes the Pseudo Frequency Matrices (PFMs),
among which that of the target Transcription factor.}

\item{targetTF}{A character strinf defining the name of the target Transcription factor (the one used in the file
indicated by the \emph{pfm} argument).}

\item{organism}{Binomial name of the organism. Can be set to NULL if you provide the genome sequence (see the argument
\emph{genome_sequence})}

\item{genome_sequence}{"getGenome" (by default) or local path to a FASTA file encoding the genomic sequence
of the organism. The default value allows the automatic download of the genomic sequence (when \emph{organism} is defined)
from ENSEMBL or ENSEMBL GENOMES.}

\item{imported_genomic_data}{An object output by \code{\link[=importGenomicData]{importGenomicData()}} and that includes chromatin state data
that are specific to the target condition>.}

\item{matches}{NULL (by default) or a named list of GRanges objects. Each GRanges object defines the location along
the genome of the matches with the primary motif of a given transcription factor. It contains also a metadata column
named 'matchLogPval'that gives the p-value of the matches. The default value allows to perform the pattern-matching analysis with the function encoded
by the Wimtrap package.}

\item{strandAsFeature}{Logical. Should be considered as feature the orientation of the matches in relation to the
direction of transcription of the closest transcript? Default is FALSE.}

\item{pvalThreshold}{P-value threshold to identify the matches with the primary motifs of the transcription factors.
Default is set to 0.001.}

\item{short_window}{Integer (20 by default). Sets the length of the short-ranges window centered on the potential binding
sites and on which the genomic features are extracted.}

\item{medium_window}{Integer (400 by default). Sets the length of the medium-ranges window centered on the potential binding
sites and on which the genomic features are extracted.}

\item{long_window}{Integer (1000 by default). Sets the length of the long-ranges window centered on the potential binding
sites and on which the genomic features are extracted.}

\item{show_annotation}{Logical (FALSE by default). Should the annotations of the potential binding sites with genomic
features be output?}
}
\value{
A data.table describing for the potential binding sites the location, the closest gene (relatively to the
transcript start site) and the prediction score. Higher the prediction score, higher the chance of the potential
binding site to be a binding site of the target condition in the target condition. Consider as minimal threshold,
the score of 0.5 and level it up for increasing the specificity. Optionally, the data.table might include the
genomic features.
genomic_data.ex <- c(CE = system.file("conserved_elements_example.bed", package = "Wimtrap"),
DGF = system.file("DGF_example.bed", package = "Wimtrap"),
DHS = system.file("DHS_example.bed", package = "Wimtrap"),
X5UTR = system.file("x5utr_example.bed", package = "Wimtrap"),
CDS = system.file("cds_example.bed", package = "Wimtrap"),
Intron = system.file("intron_example.bed", package = "Wimtrap"),
X3UTR = system.file("x3utr_example.bed", package = "Wimtrap")
)
imported_genomic_data.ex <- importGenomicData(biomart = FALSE,
genomic_data = genomic_data.ex2,
tss = system.file("tss_example.bed", package = "Wimtrap"),
tts = system.file("tts.bed", package = "Wimtrap"))
genomic_data = genomic_data.ex)
TFBSdata.ex <- getTFBSdata(ChIPpeaks = c(PIF3 = system.file("PIF3_example.bed", package = "Wimtrap"),
TOC1 = system.file("TOC1_example.bed", package = "Wimtrap")),
pfm = system.file("pfm_example.jaspar", package = "Wimtrap"),
organism = NULL,
genome_sequence = system.file("genome_example.fa", package = "Wimtrap"),
imported_genomic_data = imported_genomic_data.ex)
TFBSmodel.ex <- buildTFBSmodel(TFBSdata = TFBSdata.ex, TF4Validation = "PIF3")
PIF3BS.predictions <- predictTFBS(TFBSmodel.ex,
system.file("pfm_example.jaspar", package = "Wimtrap"),
targetTF = "PIF3",
genome_sequence = system.file("genome_example.fa", package = "Wimtrap"),
imported_genomic_data = imported_genomic_data.ex)
##To get the transcripts whose expression is potentially regulated by PIF3 using as prediction score
##threshold of 0.5 to predict the binding sites in the target condition, do as follows:
PIF3_regulated.predictions <- as.character(PIF3BS.predictions$gene\link{!duplicated(PIF3BS.predictions$prediction.score >= 0.5)})
###If you want to consider only the gene model,
###then do as followq:
PIF3_regulated.predictions <- unlist(strsplit(PIF3_regulated.predictions, "\link{.}"))\link{seq(1, 2*length(PIF3_regulated.predictions),2)}
PIF3_regulated.predictions <- PIF3_regulated.predictions\link{!duplicated(PIF3_regulated.predictions)}
}
\description{
Predicts the binding sites of a target transcription factor in a target condition
by applying a predictive model on potential binding sites
located by a prior pattern-matching analysis and annotated with genomic features extracted at their location.
}
\details{
Remark: Set the use of the strand or not as a predictive feature, the pattern-matching p-value threshold
and the lengths of the windows on which to extract the genomic feature in agreement as you did to
build the model.
}
\seealso{
\code{\link[=importGenomicData]{importGenomicData()}} for importing genomic data and \code{\link[=buildTFBSmodel]{buildTFBSmodel()}} to train a predictive model of
transcription factor binding sites.
}
